You can run Main.py to calculate the eigenvalues for an infinte potential well on the interval [-1,1].

The code uses non-orthogonal basis functions so it has to handle the overlap matrix.
	The basis functions are:
		x**n * (x-1) * (x+1)  for n = 0,1,2...

For this problem, the Schroedingers equation is:
	H@C = E*S@C where * is scalar multiplication and @ is matrix multiplication.
	H is the Hamiltonian matrix, C are the expanion coefficients, E is the
	energy, and S is the overlap matrix with S_ij = < x_i | x_j >

To solve it, we have to find a matrix V such that V*@S@V = I, i.e. V transformforms S to the identity matrix.  Note that V* is the Hermetian Conj. of V.

We can then use V to transform H and C and solve the easier:
	H'C' = EC' 
	With H' = V*@H@V and C' = V^-1@C (inverse of V)

This will give us the eigen-energies and we can get the C's in the orginal basis from V@C' = V@V^-1@C = C

The only paramter the code takes is the number of basis functions. 16 gives results for the fisrt 5 energies to within .00001 of the exact answer.

NOTE: that anything over ~20 basis functions will cause the code to crash. This is because the overlap matrix has to positive definite, i.e. it HAS to have real eigenvalues. The reason it crashes is, for over ~20 basis functions, the overlap is 0 to within numerical accuracy and our overlap matrix is no longer very to the real one. We would have no reason to expect it to be positive definite if all elements above S_ii for i > ~20 are exactly 0.


