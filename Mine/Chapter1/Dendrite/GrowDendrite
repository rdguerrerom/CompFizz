#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Title:---------- GrowDendrite - Main Function

Created on Mon Jul  1 13:13:23 2019

Author:---------Ty Sterling
Contact:--------ty.sterling@colorado.edu
Instituion:-----University of Colorado Boulder
Department:-----Material Science & Physics

Description: This is the main driver function. It calls the parser to read
    the input file, then initializes the grid and seeds all the nucleation sites.
    It loops over all particles. The input file is INPUTFILE by default but you can pass
    a differnt file as an argumnet to ./GrowDendrite. For each particle, the random walk
    proceeds until the particle lands (found_filled_site == True). Once all particles 
    have landed, the grid and arrival rates are written to files. 
    
    Optionally, the grid is saved as a .png bitmap each step and after the run, 
    all .pngs are written to a movie. You can toggle this on with 
        MAKE_MOVIE   'True'

    Optionally, the grid is plotted as a bitmap after the run. You can toggle this with
        SHOW_FIG    'True'
    
    Anyway, you can use PlotDendrite to read the .csv grid file and show the bitmap later.

"""

### import library modules
import numpy as np
import os
import shutil
import matplotlib.pyplot as plt
import sys

### import my modules
modulepath = 'modules/'
sys.path.append(modulepath)
import Grid 
import Particle
import Render
import Parser


################### GET INPUT FILE NAME ###############################
if len(sys.argv) == 1:
    inputfile = 'INPUTFILE'
elif len(sys.argv) > 2:
    print('\nUSAGE ERROR: GrowDendrite takes 0 or 1 argument.\n\n'
            'If none are given, the inputfile is \'INPUTFILE\'.\nIf 1 is '
            'give, it is the inputfile.\n')
    exit()
else:
    inputfile = str(sys.argv[1])


################# READ PARAMETERS FROM FILE #####################
params = Parser.parse(inputfile)
arrival_rate = np.zeros(params.num_particles)

################ CREATE AND SEED THE GRID #######################
grid = Grid.grid(params.gridsize)
for seed in params.seeds:
    grid.seed(seed[0],seed[1])


##### INITIALIZE DIRECTORY TO STORY TEMPORARY IMAGES FOR MOVIE #####
if params.make_movie == True:
    if os.path.exists('images'):
        shutil.rmtree('images')
        os.mkdir('images')
    else:
        os.mkdir('images')


################ LOOP OVER ALL THE PARTICLES ########################
for i in range(params.num_particles):
    print('\tNow on particle {} out of {}'.format(i+1,params.num_particles))
    particle = Particle.particle(grid,params)

    count = 0
    found_filled_site = False
    while found_filled_site == False:
        count = count+1
        found_filled_site = particle.random_walk(grid)
    arrival_rate[i] = count

    ### only write is toggled on. it slows down the calculation alot!
    if params.make_movie == True:
        Render.render_image(grid,i+1)


##### COMBINE THE TEMPORARY IMAGES INTO A MOVIE AND DELETE THEM #####
if params.make_movie == True:
    Render.render_movie() 
    shutil.rmtree('images')


####################### SAVE THE DATA #################################
np.savetxt(params.grid_file,grid.grid,fmt='%d')
np.savetxt(params.rate_file,arrival_rate,fmt='%d')


################# SHOW THE PLOT IF TOGGLED ON ########################
if params.show_fig == True:
    mask = (grid.grid != 0).astype(int)*params.num_particles*1

    fig, ax = plt.subplots()
    fig.set_size_inches(6,6,forward=True)
    fig.tight_layout(pad=2.5)

    ax.imshow(grid.grid+mask,cmap='inferno')
    for axis in ['top','bottom','left','right']:
        ax.spines[axis].set_linewidth(1.5)
    ax.minorticks_on()
    ax.tick_params(which='both', width=1)
    ax.tick_params(which='major', length=5)
    ax.tick_params(which='minor', length=3, color='k')
    ax.set_xlabel('X-coord',labelpad=4,fontweight='normal',
                  fontsize='large')
    ax.set_ylabel('Y-coord',labelpad=4,fontweight='normal',
                  fontsize='large')
    fig.suptitle('N = {}, Grid = {}x{}'
                 .format(params.num_particles,params.gridsize,params.gridsize),y=0.98)
    #plt.savefig('dendrite.png',format='png',dpi=300,bbox_inches='tight')
    plt.show()
