You can run Main.py to calculate the ground state energy and wave function for the helium atom using the Harteee-Fock method. atomic units are used (L=Bohr, M=electron_mass, E=hartree, charge=e). 

This program calculates the l=0 energies and orbitals. It only used 4 basis functions, so only the first one (n=0) is any good.

The code uses non-orthogonal basis functions so it has to handle the overlap matrix.
	The basis functions are:
		exp(-alpha_n*r**2)
		with various alphas. Look in the Orbitals.py code.

For this problem, the Schroedingers equation is:
	H@C = E*S@C where * is scalar multiplication and @ is matrix multiplication.
	H is the Hamiltonian matrix, C are the expanion coefficients, E is the
	energy, and S is the overlap matrix with S_ij = < x_i | x_j >

To solve it, we have to find a matrix V such that V*@S@V = I, i.e. V transformforms S to the identity matrix.  Note that V* is the Hermetian Conj. of V.

We can then use V to transform H and C and solve the easier:
	H'C' = EC' 
	With H' = V*@H@V and C' = V^-1@C (inverse of V)

In the above, H' depends on the C's that we are looking for. i.e. the equation is self-consistent. What we do then is start with a guess for the C's and solve the equation. If the computed C's dont match the guessed ones, we take the computed C's and plug them in to calculate H' again. We repeat this until we converge to the desired accuracy. In my code, I am actually checking the convergence of the energy, but it is the same principle. 

Look at the top of the code.

You can change the scf_tolerance (i.e. how much the energy changes between successive steps) and the max number of scf steps. You shouldnt change the number of orbitals. You can also change the scf_guess paramater that determines the starting expansion coefficients. It only supports 'equal' or 'random'
